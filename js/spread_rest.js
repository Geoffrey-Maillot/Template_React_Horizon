// spread_rest.js

console.log(" üëâ ==== Spread Operator (Op√©rateur de d√©composition) ====");
/*
 * L'op√©rateur de d√©composition (spread operator) est repr√©sent√© par `...`.
 * Il est utilis√© pour √©taler (ou d√©composer) les √©l√©ments d'un tableau ou les propri√©t√©s d'un objet.
 * Tr√®s utile pour copier, fusionner des tableaux et objets, ou passer des arguments √† une fonction.
 */

// Exemple 1 : D√©composition d'un tableau
// Ajoute tous les √©l√©ments du tableau `fruits` dans le tableau `moreFruits`
const fruits = ["Pomme", "Banane", "Mangue"];
const moreFruits = ["Orange", "Ananas", ...fruits];
console.log(" \n Tableau d√©compos√© avec spread operator:", moreFruits);
// R√©sultat : ["Orange", "Ananas", "Pomme", "Banane", "Mangue"]

// Exemple 2 : D√©composition d'un objet
// Copie toutes les propri√©t√©s de `person` dans `personWithCity`, puis ajoute `city: "Paris"`
const person = { name: "Alice", age: 25 };
const personWithCity = { ...person, city: "Paris" };
console.log(" \n Objet d√©compos√© avec spread operator:", personWithCity);
// R√©sultat : { name: "Alice", age: 25, city: "Paris" }

// Exemple 3 : Copie d'un tableau (sans lien avec l'original)
// Cr√©e une copie ind√©pendante du tableau `originalArray`
const originalArray = [1, 2, 3];
const copiedArray = [...originalArray];
copiedArray.push(4);
console.log(" Tableau original:", originalArray); // [1, 2, 3]
console.log(" \n Copie du tableau avec spread operator:", copiedArray); // [1, 2, 3, 4]

// Exemple 4 : Fusion d'objets
// Fusionne `defaultSettings` et `userSettings`, o√π `userSettings` √©crase les propri√©t√©s de `defaultSettings`
const defaultSettings = { theme: "light", notifications: true };
const userSettings = { notifications: false };
const finalSettings = { ...defaultSettings, ...userSettings };
console.log("Fusion d'objets avec spread operator:", finalSettings);
// R√©sultat : { theme: "light", notifications: false }

console.log("\n üëâ ==== Rest Operator (Op√©rateur de regroupement) ====");
/*
 * L'op√©rateur de regroupement (rest operator) est √©galement repr√©sent√© par `...`.
 * Il est utilis√© pour regrouper plusieurs √©l√©ments restants dans un tableau ou un objet.
 * Tr√®s utile pour capturer un nombre variable d'arguments dans une fonction ou pour extraire des √©l√©ments restants.
 */

// Exemple 5 : Param√®tres de fonction avec rest operator
// `sum` accepte un nombre variable de param√®tres et les additionne tous
function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}
console.log(" \n Somme avec rest operator:", sum(1, 2, 3, 4)); // R√©sultat : 10

// Exemple 6 : Rest operator pour regrouper des √©l√©ments restants dans un tableau
// `...otherFruits` capture tous les √©l√©ments restants apr√®s les deux premiers
const [firstFruit, secondFruit, ...otherFruits] = moreFruits;
console.log("Premier fruit:", firstFruit); // "Orange"
console.log("Deuxi√®me fruit:", secondFruit); // "Ananas"
console.log(" \nAutres fruits avec rest operator:", otherFruits); // ["Pomme", "Banane", "Mangue"]

// Exemple 7 : Rest operator dans la d√©composition d'un objet
// `...otherDetails` capture toutes les propri√©t√©s restantes apr√®s `name`
const { name, ...otherDetails } = personWithCity;
console.log("Nom:", name); // "Alice"
console.log(" \nAutres d√©tails avec rest operator:", otherDetails); // { age: 25, city: "Paris" }
