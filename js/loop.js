// loops.js

console.log(" ðŸ‘‰ ==== TABLEAU ORIGINAL ==== ");
const fruits = ["Pomme", "Banane", "Mangue", "Orange"];
console.log(fruits)

console.log("\nðŸ”¥ ==== Boucle for classique ==== ðŸ”¥");
/*
 * Boucle for
 * UtilisÃ©e pour itÃ©rer sur un ensemble de valeurs avec un index
 */
for (let i = 0; i < fruits.length; i++) {
  console.log(`Index ${i}: ${fruits[i]}`);
}

console.log("\nðŸ”¥ ==== Boucle for...of ==== ðŸ”¥");
/*
 * Boucle for...of
 * UtilisÃ©e pour parcourir les Ã©lÃ©ments d'un tableau ou d'un objet itÃ©rable sans index
 */
for (const fruit of fruits) {
  console.log(`Fruit: ${fruit}`);
}

console.log("\nðŸ”¥==== Boucle forEach ==== ðŸ”¥");
/*
 * forEach
 * Appelle une fonction pour chaque Ã©lÃ©ment d'un tableau
 * Ne retourne rien
 */
fruits.forEach((fruit, index) => {
  console.log(`Index ${index}: ${fruit}`);
});

console.log("\nðŸ”¥==== Boucle map ==== ðŸ”¥");
/*
 * map
 * Transforme chaque Ã©lÃ©ment d'un tableau en appliquant une fonction
 * Retourne un nouveau tableau avec les Ã©lÃ©ments transformÃ©s
 */
const fruitLengths = fruits.map(fruit => fruit.length);
console.log("Longueur des fruits:", fruitLengths);

console.log("\nðŸ”¥==== Boucle filter ==== ðŸ”¥");
/*
 * filter
 * CrÃ©e un nouveau tableau avec uniquement les Ã©lÃ©ments qui satisfont une condition
 */
const fruitsWithMoreThanFiveChars = fruits.filter(fruit => fruit.length > 5);
console.log("Fruits avec plus de 5 caractÃ¨res:", fruitsWithMoreThanFiveChars);

console.log("\nðŸ”¥==== Boucle while ==== ðŸ”¥");
/*
 * Boucle while
 * ExÃ©cute un bloc de code tant qu'une condition est vraie
 */
let count = 0;
while (count < 3) {
  console.log(`Count (while): ${count}`);
  count++;
}

console.log("\nðŸ”¥==== Boucle do...while ==== ðŸ”¥");
/*
 * Boucle do...while
 * ExÃ©cute un bloc de code au moins une fois, puis continue tant qu'une condition est vraie
 */
count = 0;
do {
  console.log(`Count (do...while): ${count}`);
  count++;
} while (count < 3);

console.log("\nðŸ”¥==== Boucle for...in ==== ðŸ”¥");
/*
 * Boucle for...in
 * UtilisÃ©e pour parcourir les propriÃ©tÃ©s d'un objet
 * Pas recommandÃ©e pour les tableaux
 */
const person = { name: "Alice", age: 25, city: "Paris" };
for (const key in person) {
  console.log(`${key}: ${person[key]}`);
}

console.log("\nðŸ”¥==== Boucle some ==== ðŸ”¥");
/*
 * some
 * Teste si au moins un Ã©lÃ©ment du tableau satisfait une condition
 * Retourne true si un Ã©lÃ©ment satisfait la condition, sinon false
 */
const hasShortFruit = fruits.some(fruit => fruit.length <= 5);
console.log("Y a-t-il un fruit avec une longueur <= 5 ? ", hasShortFruit);

console.log("\nðŸ”¥==== Boucle every ==== ðŸ”¥");
/*
 * every
 * Teste si tous les Ã©lÃ©ments d'un tableau satisfont une condition
 * Retourne true si tous les Ã©lÃ©ments satisfont la condition, sinon false
 */
const allLongFruits = fruits.every(fruit => fruit.length >= 5);
console.log("Tous les fruits ont-ils une longueur >= 5 ? ", allLongFruits);

console.log("\nðŸ”¥==== Boucle find ==== ðŸ”¥");
/*
 * find
 * Retourne le premier Ã©lÃ©ment d'un tableau qui satisfait une condition
 * Retourne undefined si aucun Ã©lÃ©ment ne correspond
 */
const longFruit = fruits.find(fruit => fruit.length > 6);
console.log("Premier fruit avec une longueur > 6: ", longFruit);

console.log("\nðŸ”¥==== Boucle findIndex ==== ðŸ”¥");
/*
 * findIndex
 * Retourne l'index du premier Ã©lÃ©ment qui satisfait une condition
 * Retourne -1 si aucun Ã©lÃ©ment ne correspond
 */
const longFruitIndex = fruits.findIndex(fruit => fruit.length > 6);
console.log("Index du premier fruit avec une longueur > 6: ", longFruitIndex);

console.log("\nðŸ”¥==== Boucle reduce ====");
/*
 * reduce
 * Applique une fonction cumulatrice Ã  chaque Ã©lÃ©ment du tableau pour rÃ©duire le tableau Ã  une valeur unique
 */
const numbers = [1, 2, 3, 4, 5];
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log("Somme des nombres:", sum);
